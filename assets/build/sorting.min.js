(function () {
    'use strict';

    (function() {
        const env = {"NODE_ENV":"development"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    var __defProp$1 = Object.defineProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    const _Rectangle = class _Rectangle {
      constructor(height, width) {
        __publicField(this, "height", 0);
        __publicField(this, "width", 0);
        __publicField(this, "element", null);
        this.height = height;
        this.width = width;
        this.element = document.createElement("div");
        this.element.innerText = height;
        this.element.style.height = height + "em";
        this.element.style.width = width + "em";
        this.element.style.color = "blue";
      }
      static set tallest(newTallest) {
        this.tallest = newTallest;
      }
      set height(newHeight) {
        this.height = newHeight;
      }
      set width(newWidth) {
        this.width = newWidth;
      }
      static get tallest() {
        return this.tallest;
      }
      get height() {
        return this.height;
      }
      get width() {
        return this.width;
      }
      get element() {
        return this.element;
      }
    };
    __name$1(_Rectangle, "Rectangle");
    __publicField(_Rectangle, "tallest", 0);
    let Rectangle = _Rectangle;

    var __defProp = Object.defineProperty;
    var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
    document.getElementById("custom-data").addEventListener("click", addCustomDataInputFields);
    document.getElementById("random-data").addEventListener("click", addRandomDataInputFields);
    function addCustomDataInputFields() {
      if (document.getElementById("random-data-input") !== null) {
        let randomDataInput = document.getElementById("random-data-input");
        let randomDataLabel = document.getElementById("random-data-input-label");
        document.getElementById("data-input-wrapper").removeChild(randomDataInput);
        document.getElementById("data-input-wrapper").removeChild(randomDataLabel);
      }
      if (document.getElementById("custom-data-input") === null) {
        let customDataInput = document.createElement("input");
        customDataInput.setAttribute("id", "custom-data-input");
        let customDataLabel = document.createElement("label");
        customDataLabel.setAttribute("id", "custom-data-input-label");
        customDataLabel.setAttribute("for", "custom-data-input");
        customDataLabel.innerText = "Add a comma separated list of 1-25 numbers.";
        document.getElementById("data-input-wrapper").appendChild(customDataInput);
        document.getElementById("data-input-wrapper").appendChild(customDataLabel);
        document.getElementById("custom-data-input").addEventListener("focusout", visualizeData);
      }
      return;
    }
    __name(addCustomDataInputFields, "addCustomDataInputFields");
    function addRandomDataInputFields() {
      if (document.getElementById("custom-data-input") !== null) {
        let customDataInput = document.getElementById("custom-data-input");
        let customDataLabel = document.getElementById("custom-data-input-label");
        document.getElementById("data-input-wrapper").removeChild(customDataInput);
        document.getElementById("data-input-wrapper").removeChild(customDataLabel);
      }
      if (document.getElementById("random-data-input") === null) {
        let randomDataInput = document.createElement("input");
        randomDataInput.setAttribute("id", "random-data-input");
        randomDataInput.setAttribute("type", "number");
        let randomDataLabel = document.createElement("label");
        randomDataLabel.setAttribute("id", "random-data-input-label");
        randomDataLabel.setAttribute("for", "random-data-input");
        randomDataLabel.innerText = "Choose how many numbers you want generated. (1-25)";
        document.getElementById("data-input-wrapper").appendChild(randomDataInput);
        document.getElementById("data-input-wrapper").appendChild(randomDataLabel);
        document.getElementById("random-data-input").addEventListener("focusout", visualizeData);
      }
      return;
    }
    __name(addRandomDataInputFields, "addRandomDataInputFields");
    function visualizeData() {
      if (document.getElementById("custom-data-input") !== null) {
        let customData = document.getElementById("custom-data-input").value;
        let customDataArray = validateCustomData(customData);
        if (customDataArray) {
          clearRectangles();
          customDataArray.forEach((number) => {
            generateRectangle(number);
          });
        }
      }
      if (document.getElementById("random-data-input") !== null) {
        let numOfRandData = document.getElementById("random-data-input").value;
        console.log(numOfRandData);
      }
      return;
    }
    __name(visualizeData, "visualizeData");
    function validateCustomData(data) {
      let dataArray = data.split(",");
      if (!dataArray.some(isNaN)) {
        return dataArray;
      } else {
        return false;
      }
    }
    __name(validateCustomData, "validateCustomData");
    function generateRectangle(number) {
      let rectangle = new Rectangle(number, 2);
      document.getElementById("sorting-visualization-area").appendChild(rectangle.element);
      return;
    }
    __name(generateRectangle, "generateRectangle");
    function clearRectangles() {
      document.getElementById("sorting-visualization-area").innerHTML = "";
    }
    __name(clearRectangles, "clearRectangles");

})();
//# sourceMappingURL=sorting.min.js.map
